kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault
  namespace: vault
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: vault
roleRef:
  kind: ClusterRole
  name: vault-secrets
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: vault
  namespace: vault
---
apiVersion: vault.banzaicloud.com/v1alpha1
kind: Vault
metadata:
  name: vault
  namespace: vault
spec:
  size: 1
  image: vault:1.5.0
  bankVaultsImage: banzaicloud/bank-vaults:1.4.2
  serviceAccount: vault
  serviceType: ClusterIP
  volumes:
  - name: vault-file
    emptyDir: {}
  volumeMounts:
  - name: vault-file
    mountPath: /vault/file
  unsealConfig:
    kubernetes:
      secretNamespace: vault
  caNamespaces:
  - "*"
  statsdDisabled: true
  serviceMonitorEnabled: false
  config:
    storage:
      file:
        path: /vault/file
    listener:
      tcp:
        address: 0.0.0.0:8200
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    ui: false
    api_addr: https://vault:8200
  externalConfig:
    policies:
    - name: allow_secrets
      rules: |
        path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
        }
    auth:
    - type: kubernetes
      roles:
      - name: kms-vault-operator
        bound_service_account_names: kms-vault-operator
        bound_service_account_namespaces: vault
        token_policies: [ allow_secrets ]
        token_ttl: 5m
    secrets:
    - path: secret
      type: kv
      description: General secrets.
      options:
        version: 1
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-secrets
  namespace: vault
data:
  AWS_ACCESS_KEY_ID: {{ required "A valid key id is required!" .Values.accessKeyId | b64enc }}
  AWS_SECRET_ACCESS_KEY: {{ required "A valid secret access key is required!" .Values.secretAccessKey | b64enc }}
type: Opaque
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: selfsigning-issuer
spec:
  selfSigned: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: default
data:
  vault-agent-config.hcl: |-
    exit_after_auth = false
    pid_file = "/home/vault/pidfile"
    auto_auth {
      method "kubernetes" {
        mount_path = "{{ "{{" }} getenv "KUBERNETES_AUTH_PATH" }}"
        config = {
          role = "{{ "{{" }} getenv "SERVICE" }}"
        }
      }
    }
    cache {
      use_auto_auth_token = true
    }
    vault {
      address = "{{ "{{" }} getenv "TARGET_VAULT_ADDRESS" }}"
      ca_path = "/opt/vault/certs/ca.crt"
    }
    listener "tcp" {
      address = "127.0.0.1:8200"
      tls_disable = true
    }
